package closer

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"sync"
	"time"

	"go.uber.org/zap"
)

// shutdownTimeout –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const shutdownTimeout = 5 * time.Second

// Closer —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º graceful shutdown –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type Closer struct {
	mu     sync.Mutex                    // –ó–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–Ω–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
	once   sync.Once                     // –ì–∞—Ä–∞–Ω—Ç–∏—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ CloseAll
	done   chan struct{}                 // –ö–∞–Ω–∞–ª –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	funcs  []func(context.Context) error // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
	logger *zap.Logger                   // –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ª–æ–≥–≥–µ—Ä
}

// New —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Closer —Å no-op –ª–æ–≥–≥–µ—Ä–æ–º
func New(signals ...os.Signal) *Closer {
	return NewWithLogger(zap.NewNop(), signals...)
}

// NewWithLogger —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Closer —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–æ–≥–≥–µ—Ä–æ–º.
// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–∏–≥–Ω–∞–ª—ã, Closer –Ω–∞—á–Ω—ë—Ç –∏—Ö —Å–ª—É—à–∞—Ç—å –∏ –≤—ã–∑–æ–≤–µ—Ç CloseAll –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.
func NewWithLogger(logger *zap.Logger, signals ...os.Signal) *Closer {
	c := &Closer{
		done:   make(chan struct{}),
		logger: logger,
	}

	if len(signals) > 0 {
		go c.handleSignals(signals...)
	}

	return c
}

// SetLogger —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è Closer
func (c *Closer) SetLogger(l *zap.Logger) {
	c.logger = l
}

// Done –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ CloseAll
func (c *Closer) Done() <-chan struct{} {
	return c.done
}

// handleSignals –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç CloseAll —Å fresh shutdown context
func (c *Closer) handleSignals(signals ...os.Signal) {
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, signals...)
	defer signal.Stop(ch)

	select {
	case <-ch:
		c.logger.Info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown")
		shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), shutdownTimeout)
		defer shutdownCancel()

		if err := c.CloseAll(shutdownCtx); err != nil {
			c.logger.Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤", zap.Error(err))
		}
	case <-c.done:
	}
}

// AddNamed –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è —Å –∏–º–µ–Ω–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func (c *Closer) AddNamed(name string, f func(context.Context) error) {
	c.Add(func(ctx context.Context) error {
		start := time.Now()
		c.logger.Info(fmt.Sprintf("üß© –ó–∞–∫—Ä—ã–≤–∞–µ–º %s", name))

		err := f(ctx)

		duration := time.Since(start)
		if err != nil {
			c.logger.Error(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ %s", name), zap.Error(err), zap.Duration("duration", duration))
		} else {
			c.logger.Info(fmt.Sprintf("‚úÖ %s —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç", name), zap.Duration("duration", duration))
		}
		return err
	})
}

// Add –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è
func (c *Closer) Add(f ...func(context.Context) error) {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.funcs = append(c.funcs, f...)
}

// CloseAll –≤—ã–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –≤–æ–∑–Ω–∏–∫—à—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–∞—è –±—ã–ª–∞.
func (c *Closer) CloseAll(ctx context.Context) error {
	var result error

	c.once.Do(func() {
		defer close(c.done)

		c.mu.Lock()
		funcs := c.funcs
		c.funcs = nil // –æ—Å–≤–æ–±–æ–¥–∏–º –ø–∞–º—è—Ç—å
		c.mu.Unlock()

		if len(funcs) == 0 {
			c.logger.Info("‚ÑπÔ∏è –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
			return
		}

		c.logger.Info("üö¶ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å graceful shutdown")

		errCh := make(chan error, len(funcs))
		var wg sync.WaitGroup

		// –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
		for i := len(funcs) - 1; i >= 0; i-- {
			f := funcs[i]
			wg.Add(1)
			go func(f func(context.Context) error) {
				defer wg.Done()

				// –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞–Ω–∏–∫–∏
				defer func() {
					if r := recover(); r != nil {
						err := fmt.Errorf("panic recovered in closer: %v", r)
						errCh <- err
						c.logger.Error("‚ö†Ô∏è Panic –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è", zap.Any("error", r))
					}
				}()

				if err := f(ctx); err != nil {
					errCh <- err
				}
			}(f)
		}

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫, –∫–æ–≥–¥–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
		go func() {
			wg.Wait()
			close(errCh)
		}()

		// –ß–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
		for {
			select {
			case <-ctx.Done():
				c.logger.Info("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω –≤–æ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è", zap.Error(ctx.Err()))
				if result == nil {
					result = ctx.Err()
				}
				return
			case err, ok := <-errCh:
				if !ok {
					c.logger.Info("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã")
					return
				}
				c.logger.Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏", zap.Error(err))
				if result == nil {
					result = err
				}
			}
		}
	})

	return result
}
